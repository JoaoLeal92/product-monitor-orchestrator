// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "github.com/JoaoLeal92/product-monitor-orchestrator/entities"
	mock "github.com/stretchr/testify/mock"
)

// ProductsRepository is an autogenerated mock type for the ProductsRepository type
type ProductsRepository struct {
	mock.Mock
}

// GetProductsListForCrawler provides a mock function with given fields:
func (_m *ProductsRepository) GetProductsListForCrawler() ([]entities.Product, error) {
	ret := _m.Called()

	var r0 []entities.Product
	if rf, ok := ret.Get(0).(func() []entities.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewProductsRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductsRepository creates a new instance of ProductsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductsRepository(t NewProductsRepositoryT) *ProductsRepository {
	mock := &ProductsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
