// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "github.com/JoaoLeal92/product-monitor-orchestrator/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductSearchHistoryRepository is an autogenerated mock type for the ProductSearchHistoryRepository type
type ProductSearchHistoryRepository struct {
	mock.Mock
}

// GetHistoryByProductID provides a mock function with given fields: productID
func (_m *ProductSearchHistoryRepository) GetHistoryByProductID(productID uuid.UUID) ([]entities.ProductSearchResult, error) {
	ret := _m.Called(productID)

	var r0 []entities.ProductSearchResult
	if rf, ok := ret.Get(0).(func(uuid.UUID) []entities.ProductSearchResult); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ProductSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNewHistory provides a mock function with given fields: productSearch
func (_m *ProductSearchHistoryRepository) InsertNewHistory(productSearch *entities.ProductSearchResult) error {
	ret := _m.Called(productSearch)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.ProductSearchResult) error); ok {
		r0 = rf(productSearch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewProductSearchHistoryRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductSearchHistoryRepository creates a new instance of ProductSearchHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductSearchHistoryRepository(t NewProductSearchHistoryRepositoryT) *ProductSearchHistoryRepository {
	mock := &ProductSearchHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
